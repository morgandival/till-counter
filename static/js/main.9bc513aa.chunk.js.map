{"version":3,"sources":["components/Header.tsx","components/Currency.tsx","components/Denomination.tsx","components/TillCounter.tsx","App.tsx","index.tsx"],"names":["Header","props","className","title","Currency","id","onChange","event","setCurrency","target","value","Denomination","symbol","denomination","toFixed","type","step","min","pattern","regex","defaultValue","onBlur","count","TillCounter","React","useState","denoms","setDenoms","total","setTotal","handleChange","denom","parseFloat","index","findIndex","x","oldDenoms","slice","handleBlur","length","map","a","reduce","b","getRegexString","getCount","outputs","forEach","toString","push","App","currency","denominations","fillCurrency","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9bc513aa.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ntype Props = {\r\n  title: string;\r\n};\r\n\r\nfunction Header(props: Props): JSX.Element {\r\n  return (\r\n    <header className=\"header\">\r\n      <h1>{props.title}</h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\ntype Props = {\r\n  currency: string;\r\n  setCurrency: React.Dispatch<React.SetStateAction<string>>;\r\n};\r\n\r\nfunction Currency(props: Props): JSX.Element {\r\n  // Handles what happens when currency is changed...\r\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n    props.setCurrency(() => {\r\n      return event.target.value;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"currency\">\r\n      <label>Choose a currency: </label>\r\n      <select id=\"currency\" onChange={handleChange}>\r\n        <option value=\"AUD\">AUD</option>\r\n        <option value=\"EUR\">EUR</option>\r\n        <option value=\"NZD\">NZD</option>\r\n        <option value=\"USD\">USD</option>\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Currency;\r\n","import React, { ChangeEventHandler, FocusEventHandler } from 'react';\r\n\r\ntype Props = {\r\n  symbol: string;\r\n  denomination: number;\r\n  regex: string;\r\n  count: number;\r\n  onChange: ChangeEventHandler;\r\n  onBlur: FocusEventHandler;\r\n};\r\n\r\nfunction Denomination(props: Props): JSX.Element {\r\n  return (\r\n    <div className=\"denomination\">\r\n      <label className=\"denom-label\">\r\n        {props.symbol}\r\n        {props.denomination.toFixed(2)}\r\n      </label>\r\n      <input\r\n        id={'denom-' + props.denomination}\r\n        type=\"text\"\r\n        className=\"denom-input\"\r\n        step={props.denomination}\r\n        min=\"0\"\r\n        pattern={props.regex}\r\n        defaultValue=\"0.00\"\r\n        onChange={props.onChange}\r\n        onBlur={props.onBlur}\r\n      ></input>\r\n      <label id={'count-' + props.denomination} className=\"denom-count\">\r\n        {props.count}\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Denomination;\r\n","import React from 'react';\r\nimport Denomination from '../components/Denomination';\r\n\r\n// Declare Props type\r\ntype Props = {\r\n  denoms: Currency;\r\n};\r\n\r\ntype Currency = {\r\n  symbol: string;\r\n  value: Array<number>;\r\n};\r\n\r\ntype Denom = {\r\n  denom: string;\r\n  value: number;\r\n};\r\n\r\n// Main function\r\nfunction TillCounter(props: Props): JSX.Element {\r\n  // state initialisation\r\n  const [denoms, setDenoms] = React.useState<Denom[]>([]);\r\n  const [total, setTotal] = React.useState(0);\r\n\r\n  // Handles what happens when the input field value is altered\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    // Extract input ID and value\r\n    const denom: string = event.target.id;\r\n    const value: number = parseFloat(event.target.value) * 100;\r\n\r\n    // Grab index of denom if it exists in the denoms array\r\n    const index = denoms.findIndex((x) => x.denom === denom);\r\n\r\n    // If index does not exist...\r\n    if (index === -1) {\r\n      // Push new denom and value to end of denoms array\r\n      setDenoms((oldDenoms) => {\r\n        return [...oldDenoms, { denom, value }];\r\n      });\r\n    }\r\n\r\n    // If index exists...\r\n    if (index > -1) {\r\n      // Update values of specific index\r\n      setDenoms((oldDenoms) => {\r\n        return [\r\n          ...oldDenoms.slice(0, index),\r\n          { denom, value },\r\n          ...oldDenoms.slice(index + 1)\r\n        ];\r\n      });\r\n    }\r\n  };\r\n\r\n  // Handles what happens when the input field is left\r\n  const handleBlur = () => {\r\n    // Check to see if there are array items to add together\r\n    if (denoms.length > 0) {\r\n      // Push to usestate\r\n      setTotal(() => {\r\n        return addDenomValues();\r\n      });\r\n    }\r\n  };\r\n\r\n  // Adds the values of the denoms array together and returns the total\r\n  function addDenomValues() {\r\n    return denoms\r\n      .map((a) => a.value)\r\n      .reduce(function (a, b) {\r\n        return a + b;\r\n      });\r\n  }\r\n\r\n  // Returns a regex string based on the denomination value and is used to populate the inputs pattern attribute for validation\r\n  function getRegexString(value: number) {\r\n    let regex = '';\r\n    switch (value) {\r\n      // $500\r\n      case 500:\r\n        regex = '([0-9]*[05]00|0).(00)';\r\n        break;\r\n      // $200\r\n      case 200:\r\n        regex = '([0-9]*[02468]00|0).(00)';\r\n        break;\r\n      // $100\r\n      case 100:\r\n        regex = '([0-9]*00|0).(00)';\r\n        break;\r\n      // $50\r\n      case 50:\r\n        regex = '([0-9]*[05]0|0).(00)';\r\n        break;\r\n      // $20\r\n      case 20:\r\n        regex = '([0-9]*[02468]0|0).(00)';\r\n        break;\r\n      // $10\r\n      case 10:\r\n        regex = '[0-9]*0.(00)';\r\n        break;\r\n      // $5\r\n      case 5:\r\n        regex = '[0-9]*[05].(00)';\r\n        break;\r\n      // $2\r\n      case 2:\r\n        regex = '[0-9]*[02468].(00)';\r\n        break;\r\n      // $1\r\n      case 1:\r\n        regex = '[0-9]+.(00)';\r\n        break;\r\n      // $0.50\r\n      case 0.5:\r\n        regex = '[0-9]+.(00|50)';\r\n        break;\r\n      // $0.25\r\n      case 0.25:\r\n        regex = '[0-9]+.(00|25|50|75)';\r\n        break;\r\n      // $0.20\r\n      case 0.2:\r\n        regex = '[0-9]+.[02468](0)';\r\n        break;\r\n      // $0.10\r\n      case 0.1:\r\n        regex = '[0-9]+.[0-9](0)';\r\n        break;\r\n      // $0.05\r\n      case 0.05:\r\n        regex = '[0-9]+.[0-9](0|5)';\r\n        break;\r\n      // $0.02\r\n      case 0.02:\r\n        regex = '[0-9]+.[0-9][02468]';\r\n        break;\r\n      // $0.01:\r\n      case 0.01:\r\n        regex = '[0-9]+.[0-9]{2}';\r\n        break;\r\n    }\r\n    return regex;\r\n  }\r\n\r\n  // Returns count of specified denomination\r\n  function getCount(index: number, value: number): number {\r\n    // If index does not exist...\r\n    if (index < 0) {\r\n      return 0;\r\n    }\r\n\r\n    // If denomination value is not cleanly divisible...\r\n    if ((denoms[index].value % (value * 100)) / 100 != 0) {\r\n      return 0;\r\n    }\r\n\r\n    // Finally, return only whole number\r\n    return denoms[index].value / value / 100;\r\n  }\r\n\r\n  // Initialise denominations output array\r\n  const outputs: Array<JSX.Element> = [];\r\n\r\n  // Fill outputs array\r\n  props.denoms.value.forEach((value) => {\r\n    // Get denoms index\r\n    const index = denoms.findIndex(\r\n      (x) => x.denom === `denom-${value.toString()}`\r\n    );\r\n\r\n    // Add Denominations as child components\r\n    outputs.push(\r\n      <Denomination\r\n        key={`denom-${value}`}\r\n        symbol={props.denoms.symbol}\r\n        denomination={value}\r\n        count={getCount(index, value)}\r\n        regex={getRegexString(value)}\r\n        onChange={handleChange}\r\n        onBlur={handleBlur}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"tillcounter\">\r\n      {outputs}\r\n      <hr />\r\n      <div className=\"total\">\r\n        <p>\r\n          <b>Total:</b>{' '}\r\n          <span className=\"total-span\">\r\n            {props.denoms.symbol}\r\n            {(total / 100).toFixed(2)}\r\n          </span>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TillCounter;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport Currency from './components/Currency';\r\nimport TillCounter from './components/TillCounter';\r\n\r\ntype Currency = {\r\n  symbol: string;\r\n  value: Array<number>;\r\n};\r\n\r\nfunction App(): JSX.Element {\r\n  // Initialise currency\r\n  const [currency, setCurrency] = React.useState('AUD');\r\n\r\n  // Based on currency select option, populate till counter denomiations\r\n  function fillCurrency(currency: string): Currency {\r\n    // Initialise return array\r\n    let denominations: Currency = { symbol: '', value: [] };\r\n\r\n    // Fill array based on currency\r\n    switch (currency) {\r\n      case 'AUD':\r\n        denominations = {\r\n          symbol: '$',\r\n          value: [100, 50, 20, 10, 5, 2, 1, 0.5, 0.2, 0.1, 0.05]\r\n        };\r\n        break;\r\n      case 'NZD':\r\n        denominations = {\r\n          symbol: '$',\r\n          value: [100, 50, 20, 10, 5, 2, 1, 0.5, 0.2, 0.1]\r\n        };\r\n        break;\r\n      case 'EUR':\r\n        denominations = {\r\n          symbol: '€',\r\n          value: [\r\n            500,\r\n            200,\r\n            100,\r\n            50,\r\n            20,\r\n            10,\r\n            5,\r\n            2,\r\n            1,\r\n            0.5,\r\n            0.2,\r\n            0.1,\r\n            0.05,\r\n            0.02,\r\n            0.01\r\n          ]\r\n        };\r\n        break;\r\n      case 'USD':\r\n        denominations = {\r\n          symbol: '$',\r\n          value: [100, 50, 20, 10, 5, 2, 1, 0.5, 0.25, 0.1, 0.05, 0.01]\r\n        };\r\n        break;\r\n    }\r\n\r\n    return denominations;\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header title=\"Till Counter\" />\r\n      <Currency currency={currency} setCurrency={setCurrency} />\r\n      <TillCounter denoms={fillCurrency(currency)} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}