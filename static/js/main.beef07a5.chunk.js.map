{"version":3,"sources":["components/Header.tsx","components/Currency.tsx","components/Denomination.tsx","components/TillCounter.tsx","App.tsx","index.tsx"],"names":["Header","props","className","title","Currency","id","onChange","event","Array","from","document","querySelectorAll","forEach","input","value","setDenoms","setTotal","setCurrency","target","Denomination","symbol","denomination","toFixed","type","step","min","pattern","regex","defaultValue","onBlur","count","TillCounter","useState","denoms","total","currency","reverse","setReverse","handleChange","denom","parseFloat","index","findIndex","x","oldDenoms","slice","handleBlur","length","map","a","reduce","b","getRegexString","getCount","Math","round","outputs","denominations","fillCurrency","toString","push","checked","onClick","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.beef07a5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ntype Props = {\r\n  title: string;\r\n};\r\n\r\nfunction Header(props: Props): JSX.Element {\r\n  return (\r\n    <header className=\"header\">\r\n      <h1>{props.title}</h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { Dispatch, SetStateAction } from 'react';\r\n\r\ntype Denom = {\r\n  denom: string;\r\n  value: number;\r\n};\r\n\r\ntype Props = {\r\n  currency: string;\r\n  setCurrency: Dispatch<SetStateAction<string>>;\r\n  setDenoms: Dispatch<SetStateAction<Denom[]>>;\r\n  setTotal: Dispatch<SetStateAction<number>>;\r\n};\r\n\r\nfunction Currency(props: Props): JSX.Element {\r\n  // Handles what happens when currency is changed...\r\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n    // Reset all input fields to 0.00\r\n    Array.from(document.querySelectorAll('input')).forEach(\r\n      (input) => (input.value = '0.00')\r\n    );\r\n\r\n    // Reset denominations array\r\n    props.setDenoms(() => []);\r\n\r\n    // Reset total\r\n    props.setTotal(() => 0);\r\n\r\n    // Return new currency value\r\n    props.setCurrency(() => event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"currency\">\r\n      <label>Choose a currency: </label>\r\n      <select id=\"currency\" onChange={handleChange}>\r\n        <option value=\"AUD\">AUD</option>\r\n        <option value=\"EUR\">EUR</option>\r\n        <option value=\"JPY\">JPY</option>\r\n        <option value=\"NZD\">NZD</option>\r\n        <option value=\"USD\">USD</option>\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Currency;\r\n","import React, { ChangeEventHandler, FocusEventHandler } from 'react';\r\n\r\ntype Props = {\r\n  symbol: string;\r\n  denomination: number;\r\n  regex: string;\r\n  count: number;\r\n  onChange: ChangeEventHandler;\r\n  onBlur: FocusEventHandler;\r\n};\r\n\r\nfunction Denomination(props: Props): JSX.Element {\r\n  return (\r\n    <div className=\"denomination\">\r\n      <label className=\"denom-label\">\r\n        {props.symbol}\r\n        {props.denomination.toFixed(2)}\r\n      </label>\r\n      <input\r\n        id={'denom-' + props.denomination}\r\n        type=\"text\"\r\n        className=\"denom-input\"\r\n        step={props.denomination}\r\n        min=\"0\"\r\n        pattern={props.regex}\r\n        defaultValue=\"0.00\"\r\n        onChange={props.onChange}\r\n        onBlur={props.onBlur}\r\n      ></input>\r\n      <label id={'count-' + props.denomination} className=\"denom-count\">\r\n        {props.count}\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Denomination;\r\n","import React, { useState } from 'react';\r\nimport Currency from '../components/Currency';\r\nimport Denomination from '../components/Denomination';\r\n\r\n// Declare types\r\ntype Currency = {\r\n  symbol: string;\r\n  value: Array<number>;\r\n};\r\n\r\ntype Denom = {\r\n  denom: string;\r\n  value: number;\r\n};\r\n\r\n// Main function\r\nfunction TillCounter(): JSX.Element {\r\n  // State initialisation\r\n  const [denoms, setDenoms] = useState<Denom[]>([]);\r\n  const [total, setTotal] = useState(0);\r\n  const [currency, setCurrency] = useState('AUD');\r\n  const [reverse, setReverse] = useState(false);\r\n\r\n  // Handles what happens when the input field value is altered\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    // Extract input ID and value\r\n    const denom: string = event.target.id;\r\n    const value: number = parseFloat(event.target.value) * 100;\r\n\r\n    // Grab index of denom if it exists in the denoms array\r\n    const index = denoms.findIndex((x) => x.denom === denom);\r\n\r\n    // If index does not exist...\r\n    if (index === -1) {\r\n      // Push new denom and value to end of denoms array\r\n      setDenoms((oldDenoms) => [...oldDenoms, { denom, value }]);\r\n    }\r\n\r\n    // If index exists...\r\n    if (index > -1) {\r\n      // Update values of specific index\r\n      setDenoms((oldDenoms) => [\r\n        ...oldDenoms.slice(0, index),\r\n        { denom, value },\r\n        ...oldDenoms.slice(index + 1)\r\n      ]);\r\n    }\r\n  };\r\n\r\n  // Handles what happens when the input field is left\r\n  const handleBlur = () => {\r\n    // Check to see if there are array items to add together\r\n    if (denoms.length > 0) {\r\n      // Push to usestate\r\n      setTotal(() => addDenomValues());\r\n    }\r\n  };\r\n\r\n  // Handles what happens when the reset button is clicked\r\n  const handleReset = () => {\r\n    // Change all input fields to 0.00\r\n    Array.from(document.querySelectorAll('input')).forEach(\r\n      (input) => (input.value = '0.00')\r\n    );\r\n\r\n    // Reset denominations array\r\n    setDenoms(() => []);\r\n\r\n    // Reset total\r\n    setTotal(() => 0);\r\n\r\n    // Reset reverse\r\n    setReverse(() => false);\r\n  };\r\n\r\n  // Adds the values of the denoms array together and returns the total\r\n  function addDenomValues() {\r\n    return denoms.map((a) => a.value).reduce((a, b) => a + b);\r\n  }\r\n\r\n  // Based on currency select option, populate till counter denomiations\r\n  function fillCurrency(currency: string): Currency {\r\n    // Initialise return array\r\n    let denominations: Currency = { symbol: '', value: [] };\r\n\r\n    // Fill array based on currency\r\n    switch (currency) {\r\n      case 'AUD':\r\n        denominations = {\r\n          symbol: '$',\r\n          value: [100, 50, 20, 10, 5, 2, 1, 0.5, 0.2, 0.1, 0.05]\r\n        };\r\n        break;\r\n      case 'NZD':\r\n        denominations = {\r\n          symbol: '$',\r\n          value: [100, 50, 20, 10, 5, 2, 1, 0.5, 0.2, 0.1]\r\n        };\r\n        break;\r\n      case 'EUR':\r\n        denominations = {\r\n          symbol: '€',\r\n          value: [\r\n            500,\r\n            200,\r\n            100,\r\n            50,\r\n            20,\r\n            10,\r\n            5,\r\n            2,\r\n            1,\r\n            0.5,\r\n            0.2,\r\n            0.1,\r\n            0.05,\r\n            0.02,\r\n            0.01\r\n          ]\r\n        };\r\n        break;\r\n      case 'JPY':\r\n        denominations = {\r\n          symbol: '¥',\r\n          value: [10000, 5000, 2000, 1000, 500, 100, 50, 10, 5, 1]\r\n        };\r\n        break;\r\n      case 'USD':\r\n        denominations = {\r\n          symbol: '$',\r\n          value: [100, 50, 20, 10, 5, 2, 1, 0.5, 0.25, 0.1, 0.05, 0.01]\r\n        };\r\n        break;\r\n    }\r\n\r\n    if (reverse === true) {\r\n      denominations.value.reverse();\r\n    }\r\n\r\n    return denominations;\r\n  }\r\n\r\n  // Returns a regex string based on the denomination value and is used to populate the inputs pattern attribute for validation.\r\n  function getRegexString(value: number) {\r\n    let regex: string;\r\n\r\n    switch (value) {\r\n      case 10000:\r\n        regex = '([0-9]*0000|0).00';\r\n        break;\r\n      case 5000:\r\n        regex = '([0-9]*[05]000|0).00';\r\n        break;\r\n      case 2000:\r\n        regex = '([0-9]*[02468]000|0).00';\r\n        break;\r\n      case 1000:\r\n        regex = '([0-9]*000|0).00';\r\n        break;\r\n      case 500:\r\n        regex = '([0-9]*[05]00|0).00';\r\n        break;\r\n      case 200:\r\n        regex = '([0-9]*[02468]00|0).00';\r\n        break;\r\n      case 100:\r\n        regex = '([0-9]*00|0).00';\r\n        break;\r\n      case 50:\r\n        regex = '([0-9]*[05]0|0).00';\r\n        break;\r\n      case 20:\r\n        regex = '([0-9]*[02468]0|0).00';\r\n        break;\r\n      case 10:\r\n        regex = '[0-9]*0.00';\r\n        break;\r\n      case 5:\r\n        regex = '[0-9]*[05].00';\r\n        break;\r\n      case 2:\r\n        regex = '[0-9]*[02468].00';\r\n        break;\r\n      case 1:\r\n        regex = '[0-9]+.00';\r\n        break;\r\n      case 0.5:\r\n        regex = '[0-9]+.(0|5)0';\r\n        break;\r\n      case 0.25:\r\n        regex = '[0-9]+.(00|25|50|75)';\r\n        break;\r\n      case 0.2:\r\n        regex = '[0-9]+.[02468]0';\r\n        break;\r\n      case 0.1:\r\n        regex = '[0-9]+.[0-9]0';\r\n        break;\r\n      case 0.05:\r\n        regex = '[0-9]+.[0-9](0|5)';\r\n        break;\r\n      case 0.02:\r\n        regex = '[0-9]+.[0-9][02468]';\r\n        break;\r\n      case 0.01:\r\n        regex = '[0-9]+.[0-9]{2}';\r\n        break;\r\n      default:\r\n        regex = '';\r\n        break;\r\n    }\r\n    return regex;\r\n  }\r\n\r\n  // Returns count of specified denomination\r\n  function getCount(index: number, value: number): number {\r\n    // If index does not exist...\r\n    if (index < 0) {\r\n      return 0;\r\n    }\r\n\r\n    // If denomination value is not cleanly divisible...\r\n    if ((Math.round(denoms[index].value) % (value * 100)) / 100 != 0) {\r\n      return 0;\r\n    }\r\n\r\n    // Finally, return only whole number\r\n    return Math.round(denoms[index].value) / value / 100;\r\n  }\r\n\r\n  // Initialise denominations output array\r\n  const outputs: Array<JSX.Element> = [];\r\n\r\n  // Get denominations based on selected currency\r\n  const denominations = fillCurrency(currency);\r\n\r\n  // Fill outputs array\r\n  denominations.value.forEach((value) => {\r\n    // Get denoms index\r\n    const index = denoms.findIndex(\r\n      (x) => x.denom === `denom-${value.toString()}`\r\n    );\r\n\r\n    // Add Denominations as child components\r\n    outputs.push(\r\n      <Denomination\r\n        key={`denom-${value}`}\r\n        symbol={denominations.symbol}\r\n        denomination={value}\r\n        count={getCount(index, value)}\r\n        regex={getRegexString(value)}\r\n        onChange={handleChange}\r\n        onBlur={handleBlur}\r\n      />\r\n    );\r\n  });\r\n\r\n  const handleReverse = () => {\r\n    reverse ? setReverse(() => false) : setReverse(() => true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"tillcounter\">\r\n      <Currency\r\n        currency={currency}\r\n        setCurrency={setCurrency}\r\n        setDenoms={setDenoms}\r\n        setTotal={setTotal}\r\n      />\r\n      <div className=\"reverse\">\r\n        <label>Reverse: </label>\r\n        <input type=\"checkbox\" checked={reverse} onChange={handleReverse} />\r\n      </div>\r\n      {outputs}\r\n      <hr />\r\n      <div className=\"total\">\r\n        <p>\r\n          <b>Total:</b>{' '}\r\n          <span className=\"total-span\">\r\n            {denominations.symbol}\r\n            {(total / 100).toFixed(2)}\r\n          </span>\r\n        </p>\r\n        <button className=\"reset\" onClick={handleReset}>\r\n          Reset\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TillCounter;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport TillCounter from './components/TillCounter';\r\n\r\nfunction App(): JSX.Element {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header title=\"Till Counter\" />\r\n      <TillCounter />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}