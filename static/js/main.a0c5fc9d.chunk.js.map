{"version":3,"sources":["components/Header.tsx","components/Denomination.tsx","components/TillCounter.tsx","App.tsx","index.tsx"],"names":["Header","props","className","title","Denomination","denomination","toFixed","id","type","step","min","pattern","regex","defaultValue","onChange","onBlur","count","TillCounter","React","useState","denoms","setDenoms","total","setTotal","handleChange","event","denom","target","value","parseFloat","index","findIndex","x","oldDenoms","slice","handleBlur","length","map","a","reduce","b","console","log","getRegexString","getCount","outputs","forEach","toString","push","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a0c5fc9d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ntype Props = {\r\n  title: string;\r\n};\r\n\r\nfunction Header(props: Props): JSX.Element {\r\n  return (\r\n    <header className=\"header\">\r\n      <h1>{props.title}</h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { ChangeEventHandler, FocusEventHandler } from 'react';\r\n\r\ntype Props = {\r\n  denomination: number;\r\n  regex: string;\r\n  count: number;\r\n  onChange: ChangeEventHandler;\r\n  onBlur: FocusEventHandler;\r\n};\r\n\r\nfunction Denomination(props: Props): JSX.Element {\r\n  return (\r\n    <div className=\"denomination\">\r\n      <label className=\"denom-label\">${props.denomination.toFixed(2)}</label>\r\n      <input\r\n        id={'denom-' + props.denomination}\r\n        type=\"text\"\r\n        className=\"denom-input\"\r\n        step={props.denomination}\r\n        min=\"0\"\r\n        pattern={props.regex}\r\n        defaultValue=\"0.00\"\r\n        onChange={props.onChange}\r\n        onBlur={props.onBlur}\r\n      ></input>\r\n      <label id={'count-' + props.denomination} className=\"denom-count\">\r\n        {props.count}\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Denomination;\r\n","import React from 'react';\r\nimport Denomination from '../components/Denomination';\r\n\r\n// Declare Props type\r\ntype Props = {\r\n  denoms: Array<number>;\r\n};\r\n\r\ninterface Denom {\r\n  denom: string;\r\n  value: number;\r\n}\r\n\r\n// Main function\r\nfunction TillCounter(props: Props): JSX.Element {\r\n  // state initialisation\r\n  const [denoms, setDenoms] = React.useState<Denom[]>([]);\r\n  const [total, setTotal] = React.useState(0);\r\n\r\n  // Handles what happens when the input field value is altered\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    // Extract input ID and value\r\n    const denom: string = event.target.id;\r\n    const value: number = parseFloat(event.target.value) * 100;\r\n\r\n    // Grab index of denom if it exists in the denoms array\r\n    const index = denoms.findIndex((x) => x.denom === denom);\r\n\r\n    // If index does not exist...\r\n    if (index === -1) {\r\n      // Push new denom and value to end of denoms array\r\n      setDenoms((oldDenoms) => {\r\n        return [...oldDenoms, { denom, value }];\r\n      });\r\n    }\r\n\r\n    // If index exists...\r\n    if (index > -1) {\r\n      // Update values of specific index\r\n      setDenoms((oldDenoms) => {\r\n        return [\r\n          ...oldDenoms.slice(0, index),\r\n          { denom, value },\r\n          ...oldDenoms.slice(index + 1)\r\n        ];\r\n      });\r\n    }\r\n  };\r\n\r\n  // Handles what happens when the input field is left\r\n  const handleBlur = () => {\r\n    // Check to see if there are array items to add together\r\n    if (denoms.length > 0) {\r\n      // Push to usestate\r\n      setTotal(() => {\r\n        return addDenomValues();\r\n      });\r\n    }\r\n\r\n    console.log(denoms);\r\n  };\r\n\r\n  // This function adds the values of the denoms array together and returns the total\r\n  function addDenomValues() {\r\n    return denoms\r\n      .map((a) => a.value)\r\n      .reduce(function (a, b) {\r\n        return a + b;\r\n      });\r\n  }\r\n\r\n  // Returns a regex string based on the denomination value and is used to populate the inputs pattern attribute for validation\r\n  function getRegexString(value: number) {\r\n    let regex = '';\r\n    switch (value) {\r\n      // $100\r\n      case 100:\r\n        regex = '([0-9]*[0]{2}|0).[0]{2}';\r\n        break;\r\n      // $50\r\n      case 50:\r\n        regex = '([0-9]*[05]{1}[0]|0).[0]{2}';\r\n        break;\r\n      // $20\r\n      case 20:\r\n        regex = '([0-9]*[02468]{1}[0]|0).[0]{2}';\r\n        break;\r\n      // $10\r\n      case 10:\r\n        regex = '[0-9]*[0].[0]{2}';\r\n        break;\r\n      // $5\r\n      case 5:\r\n        regex = '[0-9]*[05].[0]{2}';\r\n        break;\r\n      // $2\r\n      case 2:\r\n        regex = '[0-9]*[02468].[0]{2}';\r\n        break;\r\n      // $1\r\n      case 1:\r\n        regex = '[0-9]+.[0]{2}';\r\n        break;\r\n      // $0.50\r\n      case 0.5:\r\n        regex = '[0-9]+.[05][0]';\r\n        break;\r\n      // $0.20\r\n      case 0.2:\r\n        regex = '[0-9]+.[02468][0]';\r\n        break;\r\n      // $0.10\r\n      case 0.1:\r\n        regex = '[0-9]+.[0-9][0]';\r\n        break;\r\n      // $0.05\r\n      case 0.05:\r\n        regex = '[0-9]+.[0-9][05]';\r\n        break;\r\n    }\r\n    return regex;\r\n  }\r\n\r\n  // Returns count of specified denomination\r\n  function getCount(index: number, value: number): number {\r\n    // If index does not exist...\r\n    if (index < 0) {\r\n      return 0;\r\n    }\r\n\r\n    // If denomination value is not cleanly divisible...\r\n    if ((denoms[index].value % (value * 100)) / 100 != 0) {\r\n      return 0;\r\n    }\r\n\r\n    // Finally, return only whole number\r\n    return denoms[index].value / value / 100;\r\n  }\r\n\r\n  // Initialise denominations output array\r\n  const outputs: Array<JSX.Element> = [];\r\n\r\n  // Fill outputs array\r\n  props.denoms.forEach((value) => {\r\n    // Get denoms index\r\n    const index = denoms.findIndex(\r\n      (x) => x.denom === `denom-${value.toString()}`\r\n    );\r\n\r\n    // Add Denominations as child components\r\n    outputs.push(\r\n      <Denomination\r\n        key={`denom-${value}`}\r\n        denomination={value}\r\n        count={getCount(index, value)}\r\n        regex={getRegexString(value)}\r\n        onChange={handleChange}\r\n        onBlur={handleBlur}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"tillcounter\">\r\n      {outputs}\r\n      <hr />\r\n      <div className=\"total\">\r\n        <p>\r\n          <b>Total:</b>{' '}\r\n          <span className=\"total-span\">${(total / 100).toFixed(2)}</span>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TillCounter;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport TillCounter from './components/TillCounter';\r\n\r\nfunction App(): JSX.Element {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header title=\"Till Counter\" />\r\n      <TillCounter denoms={[100, 50, 20, 10, 5, 2, 1, 0.5, 0.2, 0.1, 0.05]} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}